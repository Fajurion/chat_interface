// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Libspaceship {
  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;

  Stream<Action> createActionStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateActionStreamConstMeta;

  Future<void> startVoice(
      {required String clientId,
      required String verificationKey,
      required String encryptionKey,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartVoiceConstMeta;

  Future<void> testVoice({required String device, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestVoiceConstMeta;

  Future<void> stop({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopConstMeta;

  Future<void> setMuted({required bool muted, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetMutedConstMeta;

  Future<void> setDeafen({required bool deafened, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetDeafenConstMeta;

  Future<bool> isMuted({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsMutedConstMeta;

  Future<bool> isDeafened({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsDeafenedConstMeta;

  Future<void> setAmplitudeLogging(
      {required bool amplitudeLogging, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetAmplitudeLoggingConstMeta;

  Future<bool> isAmplitudeLogging({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsAmplitudeLoggingConstMeta;

  Future<void> setTalkingAmplitude({required double amplitude, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetTalkingAmplitudeConstMeta;

  Future<double> getTalkingAmplitude({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTalkingAmplitudeConstMeta;

  Future<void> setSilentMute({required bool silentMute, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetSilentMuteConstMeta;

  Stream<double> createAmplitudeStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateAmplitudeStreamConstMeta;

  Future<void> deleteAmplitudeStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteAmplitudeStreamConstMeta;

  Future<List<InputDevice>> listInputDevices({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListInputDevicesConstMeta;

  Future<String> getDefaultId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDefaultIdConstMeta;

  Future<List<OutputDevice>> listOutputDevices({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListOutputDevicesConstMeta;
}

class Action {
  final String action;
  final String data;

  const Action({
    required this.action,
    required this.data,
  });
}

class InputDevice {
  final String id;
  final int sampleRate;
  final bool bestQuality;

  const InputDevice({
    required this.id,
    required this.sampleRate,
    required this.bestQuality,
  });
}

class LogEntry {
  final int timeSecs;
  final String tag;
  final String msg;

  const LogEntry({
    required this.timeSecs,
    required this.tag,
    required this.msg,
  });
}

class OutputDevice {
  final String id;

  const OutputDevice({
    required this.id,
  });
}

class LibspaceshipImpl implements Libspaceship {
  final LibspaceshipPlatform _platform;
  factory LibspaceshipImpl(ExternalLibrary dylib) =>
      LibspaceshipImpl.raw(LibspaceshipPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LibspaceshipImpl.wasm(FutureOr<WasmModule> module) =>
      LibspaceshipImpl(module as ExternalLibrary);
  LibspaceshipImpl.raw(this._platform);
  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      parseErrorData: null,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Stream<Action> createActionStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_action_stream(port_),
      parseSuccessData: _wire2api_action,
      parseErrorData: null,
      constMeta: kCreateActionStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateActionStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_action_stream",
        argNames: [],
      );

  Future<void> startVoice(
      {required String clientId,
      required String verificationKey,
      required String encryptionKey,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(clientId);
    var arg1 = _platform.api2wire_String(verificationKey);
    var arg2 = _platform.api2wire_String(encryptionKey);
    var arg3 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_start_voice(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kStartVoiceConstMeta,
      argValues: [clientId, verificationKey, encryptionKey, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartVoiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_voice",
        argNames: ["clientId", "verificationKey", "encryptionKey", "address"],
      );

  Future<void> testVoice({required String device, dynamic hint}) {
    var arg0 = _platform.api2wire_String(device);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_voice(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kTestVoiceConstMeta,
      argValues: [device],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestVoiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_voice",
        argNames: ["device"],
      );

  Future<void> stop({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kStopConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop",
        argNames: [],
      );

  Future<void> setMuted({required bool muted, dynamic hint}) {
    var arg0 = muted;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_muted(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetMutedConstMeta,
      argValues: [muted],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_muted",
        argNames: ["muted"],
      );

  Future<void> setDeafen({required bool deafened, dynamic hint}) {
    var arg0 = deafened;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_deafen(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetDeafenConstMeta,
      argValues: [deafened],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetDeafenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_deafen",
        argNames: ["deafened"],
      );

  Future<bool> isMuted({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_muted(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsMutedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_muted",
        argNames: [],
      );

  Future<bool> isDeafened({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_deafened(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsDeafenedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsDeafenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_deafened",
        argNames: [],
      );

  Future<void> setAmplitudeLogging(
      {required bool amplitudeLogging, dynamic hint}) {
    var arg0 = amplitudeLogging;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_amplitude_logging(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetAmplitudeLoggingConstMeta,
      argValues: [amplitudeLogging],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetAmplitudeLoggingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_amplitude_logging",
        argNames: ["amplitudeLogging"],
      );

  Future<bool> isAmplitudeLogging({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_amplitude_logging(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsAmplitudeLoggingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsAmplitudeLoggingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_amplitude_logging",
        argNames: [],
      );

  Future<void> setTalkingAmplitude({required double amplitude, dynamic hint}) {
    var arg0 = api2wire_f32(amplitude);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_talking_amplitude(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetTalkingAmplitudeConstMeta,
      argValues: [amplitude],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetTalkingAmplitudeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_talking_amplitude",
        argNames: ["amplitude"],
      );

  Future<double> getTalkingAmplitude({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_talking_amplitude(port_),
      parseSuccessData: _wire2api_f32,
      parseErrorData: null,
      constMeta: kGetTalkingAmplitudeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTalkingAmplitudeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_talking_amplitude",
        argNames: [],
      );

  Future<void> setSilentMute({required bool silentMute, dynamic hint}) {
    var arg0 = silentMute;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_silent_mute(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetSilentMuteConstMeta,
      argValues: [silentMute],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetSilentMuteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_silent_mute",
        argNames: ["silentMute"],
      );

  Stream<double> createAmplitudeStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_amplitude_stream(port_),
      parseSuccessData: _wire2api_f32,
      parseErrorData: null,
      constMeta: kCreateAmplitudeStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAmplitudeStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_amplitude_stream",
        argNames: [],
      );

  Future<void> deleteAmplitudeStream({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_delete_amplitude_stream(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kDeleteAmplitudeStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteAmplitudeStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_amplitude_stream",
        argNames: [],
      );

  Future<List<InputDevice>> listInputDevices({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_input_devices(port_),
      parseSuccessData: _wire2api_list_input_device,
      parseErrorData: null,
      constMeta: kListInputDevicesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListInputDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_input_devices",
        argNames: [],
      );

  Future<String> getDefaultId({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_default_id(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kGetDefaultIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDefaultIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_default_id",
        argNames: [],
      );

  Future<List<OutputDevice>> listOutputDevices({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_output_devices(port_),
      parseSuccessData: _wire2api_list_output_device,
      parseErrorData: null,
      constMeta: kListOutputDevicesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListOutputDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_output_devices",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Action _wire2api_action(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Action(
      action: _wire2api_String(arr[0]),
      data: _wire2api_String(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  InputDevice _wire2api_input_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return InputDevice(
      id: _wire2api_String(arr[0]),
      sampleRate: _wire2api_u32(arr[1]),
      bestQuality: _wire2api_bool(arr[2]),
    );
  }

  List<InputDevice> _wire2api_list_input_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_input_device).toList();
  }

  List<OutputDevice> _wire2api_list_output_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_output_device).toList();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LogEntry(
      timeSecs: _wire2api_i64(arr[0]),
      tag: _wire2api_String(arr[1]),
      msg: _wire2api_String(arr[2]),
    );
  }

  OutputDevice _wire2api_output_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OutputDevice(
      id: _wire2api_String(arr[0]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class LibspaceshipPlatform extends FlutterRustBridgeBase<LibspaceshipWire> {
  LibspaceshipPlatform(ffi.DynamicLibrary dylib)
      : super(LibspaceshipWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class LibspaceshipWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibspaceshipWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibspaceshipWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_log_stream');
  late final _wire_create_log_stream =
      _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_create_action_stream(
    int port_,
  ) {
    return _wire_create_action_stream(
      port_,
    );
  }

  late final _wire_create_action_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_action_stream');
  late final _wire_create_action_stream =
      _wire_create_action_streamPtr.asFunction<void Function(int)>();

  void wire_start_voice(
    int port_,
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> verification_key,
    ffi.Pointer<wire_uint_8_list> encryption_key,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_start_voice(
      port_,
      client_id,
      verification_key,
      encryption_key,
      address,
    );
  }

  late final _wire_start_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_start_voice');
  late final _wire_start_voice = _wire_start_voicePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_test_voice(
    int port_,
    ffi.Pointer<wire_uint_8_list> device,
  ) {
    return _wire_test_voice(
      port_,
      device,
    );
  }

  late final _wire_test_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_test_voice');
  late final _wire_test_voice = _wire_test_voicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_stop(
    int port_,
  ) {
    return _wire_stop(
      port_,
    );
  }

  late final _wire_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_stop');
  late final _wire_stop = _wire_stopPtr.asFunction<void Function(int)>();

  void wire_set_muted(
    int port_,
    bool muted,
  ) {
    return _wire_set_muted(
      port_,
      muted,
    );
  }

  late final _wire_set_mutedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_set_muted');
  late final _wire_set_muted =
      _wire_set_mutedPtr.asFunction<void Function(int, bool)>();

  void wire_set_deafen(
    int port_,
    bool deafened,
  ) {
    return _wire_set_deafen(
      port_,
      deafened,
    );
  }

  late final _wire_set_deafenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_set_deafen');
  late final _wire_set_deafen =
      _wire_set_deafenPtr.asFunction<void Function(int, bool)>();

  void wire_is_muted(
    int port_,
  ) {
    return _wire_is_muted(
      port_,
    );
  }

  late final _wire_is_mutedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_is_muted');
  late final _wire_is_muted =
      _wire_is_mutedPtr.asFunction<void Function(int)>();

  void wire_is_deafened(
    int port_,
  ) {
    return _wire_is_deafened(
      port_,
    );
  }

  late final _wire_is_deafenedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_is_deafened');
  late final _wire_is_deafened =
      _wire_is_deafenedPtr.asFunction<void Function(int)>();

  void wire_set_amplitude_logging(
    int port_,
    bool amplitude_logging,
  ) {
    return _wire_set_amplitude_logging(
      port_,
      amplitude_logging,
    );
  }

  late final _wire_set_amplitude_loggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_set_amplitude_logging');
  late final _wire_set_amplitude_logging =
      _wire_set_amplitude_loggingPtr.asFunction<void Function(int, bool)>();

  void wire_is_amplitude_logging(
    int port_,
  ) {
    return _wire_is_amplitude_logging(
      port_,
    );
  }

  late final _wire_is_amplitude_loggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_is_amplitude_logging');
  late final _wire_is_amplitude_logging =
      _wire_is_amplitude_loggingPtr.asFunction<void Function(int)>();

  void wire_set_talking_amplitude(
    int port_,
    double amplitude,
  ) {
    return _wire_set_talking_amplitude(
      port_,
      amplitude,
    );
  }

  late final _wire_set_talking_amplitudePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_set_talking_amplitude');
  late final _wire_set_talking_amplitude =
      _wire_set_talking_amplitudePtr.asFunction<void Function(int, double)>();

  void wire_get_talking_amplitude(
    int port_,
  ) {
    return _wire_get_talking_amplitude(
      port_,
    );
  }

  late final _wire_get_talking_amplitudePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_talking_amplitude');
  late final _wire_get_talking_amplitude =
      _wire_get_talking_amplitudePtr.asFunction<void Function(int)>();

  void wire_set_silent_mute(
    int port_,
    bool silent_mute,
  ) {
    return _wire_set_silent_mute(
      port_,
      silent_mute,
    );
  }

  late final _wire_set_silent_mutePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_set_silent_mute');
  late final _wire_set_silent_mute =
      _wire_set_silent_mutePtr.asFunction<void Function(int, bool)>();

  void wire_create_amplitude_stream(
    int port_,
  ) {
    return _wire_create_amplitude_stream(
      port_,
    );
  }

  late final _wire_create_amplitude_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_amplitude_stream');
  late final _wire_create_amplitude_stream =
      _wire_create_amplitude_streamPtr.asFunction<void Function(int)>();

  void wire_delete_amplitude_stream(
    int port_,
  ) {
    return _wire_delete_amplitude_stream(
      port_,
    );
  }

  late final _wire_delete_amplitude_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_delete_amplitude_stream');
  late final _wire_delete_amplitude_stream =
      _wire_delete_amplitude_streamPtr.asFunction<void Function(int)>();

  void wire_list_input_devices(
    int port_,
  ) {
    return _wire_list_input_devices(
      port_,
    );
  }

  late final _wire_list_input_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_input_devices');
  late final _wire_list_input_devices =
      _wire_list_input_devicesPtr.asFunction<void Function(int)>();

  void wire_get_default_id(
    int port_,
  ) {
    return _wire_get_default_id(
      port_,
    );
  }

  late final _wire_get_default_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_default_id');
  late final _wire_get_default_id =
      _wire_get_default_idPtr.asFunction<void Function(int)>();

  void wire_list_output_devices(
    int port_,
  ) {
    return _wire_list_output_devices(
      port_,
    );
  }

  late final _wire_list_output_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_output_devices');
  late final _wire_list_output_devices =
      _wire_list_output_devicesPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int FRAME_SIZE = 960;
